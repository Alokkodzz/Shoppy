name: Deploy Windows Microservice

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'Readme.md'

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: terraform init
        working-directory: Infra
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: terraform apply
        run: terraform apply --auto-approve
        working-directory: Infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  ASG_Rotation:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Doube ASG count
        run: |
          Current_Desired_count=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names OSA --query "AutoScalingGroups[0].DesiredCapacity")

          OSA_New_Desired_count=$(( Current_Desired_count * 2 ))

          aws autoscaling update-auto-scaling-group --auto-scaling-group-name OSA --min-size $OSA_New_Desired_count --max-size $OSA_New_Desired_count
          
          Current_Desired_count=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names PSA --query "AutoScalingGroups[0].DesiredCapacity")

          PSA_New_Desired_count=$(( Current_Desired_count * 2 ))

          aws autoscaling update-auto-scaling-group --auto-scaling-group-name PSA --min-size $PSA_New_Desired_count --max-size $PSA_New_Desired_count

          sleep 240
      - name: Decrease ASG count
        run: |
          sleep 240
          New_count=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names OSA --query "AutoScalingGroups[0].DesiredCapacity")
          OSA_Rotate_Instance=$(( New_count / 2 ))
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name SB1-batch --min-size $OSA_Rotate_Instance --max-size $OSA_Rotate_Instance

          New_count=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names PSA --query "AutoScalingGroups[0].DesiredCapacity")
          PSA_Rotate_Instance=$(( New_count / 2 ))
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name SB1-batch --min-size $PSA_Rotate_Instance --max-size $PSA_Rotate_Instance
  update-newtag-in-helm-chart:
    runs-on: ubuntu-latest
    needs: terraform
    

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}
        
      - name: Read version
        id: version
        run: echo "VERSION=$(cat shoppy/frontend/VERSION)" >> $GITHUB_ENV

      - name: Update tag in Helm chart
        run: |
          sed -i 's/tag: .*/tag: "${{ env.VERSION }}"/' helm/go-web-app-chart/values.yaml

      - name: Commit and push changes
        run: |
          git config --global user.email "alok63579@gmail.com"
          git config --global user.name "alokkodzz"
          git fetch origin
          git checkout ${{ github.head_ref || github.ref_name }}
          git add helm/go-web-app-chart/values.yaml
          git commit -m "Update tag in Helm chart [skip ci]" || echo "No changes to commit"  # Avoid errors if no changes
          git push origin ${{ github.head_ref || github.ref_name }}